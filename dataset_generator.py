#!/usr/bin/env python3
"""
Dataset Generator for CPU-Optimized LoRA Fine-Tuning
Renewable Energy Technology Domain
"""

import json
import random
from typing import List, Dict, Any

# Sample Q-A pairs for renewable energy domain
SAMPLE_QA_PAIRS = [
    {
        "Q": "What is renewable energy?",
        "A": "Renewable energy is energy generated from natural resources that are continually replenished, such as solar, wind, and hydropower."
    },
    {
        "Q": "How do solar panels work?",
        "A": "Solar panels convert sunlight into electricity using photovoltaic cells that capture and convert the sun's energy."
    },
    {
        "Q": "What is wind energy?",
        "A": "Wind energy harnesses the power of wind to generate electricity using wind turbines."
    },
    {
        "Q": "Can renewable energy replace fossil fuels?",
        "A": "Renewable energy has the potential to replace fossil fuels as technology advances, given its sustainable and environmentally friendly nature."
    },
    {
        "Q": "What is the efficiency of solar panels?",
        "A": "The efficiency of solar panels typically ranges from 15% to 22%, depending on the technology and manufacturer."
    },
    {
        "Q": "What are the benefits of using wind energy?",
        "A": "Wind energy reduces reliance on fossil fuels, decreases carbon emissions, and provides cost-effective and sustainable power."
    },
    {
        "Q": "How is hydroelectric power generated?",
        "A": "Hydroelectric power is generated by using water flow to spin turbines that produce electricity."
    },
    {
        "Q": "What is geothermal energy?",
        "A": "Geothermal energy is heat derived from the Earth's interior used for electricity generation and direct heating applications."
    },
    {
        "Q": "What factors affect the efficiency of wind turbines?",
        "A": "Factors include wind speed, turbine design, and environmental conditions affecting turbine performance."
    },
    {
        "Q": "What is the role of battery storage in renewable energy?",
        "A": "Battery storage helps balance supply and demand by storing excess renewable energy for later use, ensuring a consistent power supply."
    }
]

def convert_to_alpaca_format(qa_pairs: List[Dict[str, str]]) -> List[Dict[str, str]]:
    """Convert Q-A pairs to Alpaca instruction-tuning format."""
    alpaca_data = []
    
    for pair in qa_pairs:
        alpaca_entry = {
            "instruction": pair["Q"],
            "input": "",
            "output": pair["A"]
        }
        alpaca_data.append(alpaca_entry)
    
    return alpaca_data

def generate_variations(base_qa_pairs: List[Dict[str, str]], target_count: int = 5000) -> List[Dict[str, str]]:
    """Generate variations of the base Q-A pairs to reach target count."""
    variations = []
    
    # Question variation templates
    question_templates = [
        "Could you explain {}?",
        "What do you know about {}?",
        "Can you tell me about {}?",
        "How would you describe {}?",
        "What are the key aspects of {}?"
    ]
    
    # Answer variation starters
    answer_starters = [
        "In simple terms, ",
        "To put it simply, ",
        "Essentially, ",
        "Basically, ",
        ""
    ]
    
    while len(variations) < target_count:
        for base_pair in base_qa_pairs:
            if len(variations) >= target_count:
                break
                
            # Create variations of the question
            base_question = base_pair["Q"].replace("What is ", "").replace("?", "")
            
            for template in question_templates:
                if len(variations) >= target_count:
                    break
                    
                # Generate variation
                variation = {
                    "Q": template.format(base_question.lower()),
                    "A": random.choice(answer_starters) + base_pair["A"]
                }
                variations.append(variation)
    
    return variations[:target_count]

def save_dataset(dataset: List[Dict[str, str]], filename: str):
    """Save dataset to JSON file."""
    with open(filename, 'w') as f:
        json.dump(dataset, f, indent=2)
    print(f"Dataset saved to {filename} with {len(dataset)} examples")

def load_dataset(filename: str) -> List[Dict[str, str]]:
    """Load dataset from JSON file."""
    with open(filename, 'r') as f:
        return json.load(f)

def dataset_sanity_check(dataset: List[Dict[str, str]], num_samples: int = 5):
    """Perform sanity check on dataset."""
    print(f"Dataset Statistics:")
    print(f"Total examples: {len(dataset)}")
    print(f"First {num_samples} examples:")
    print("-" * 50)
    
    for i, example in enumerate(dataset[:num_samples]):
        print(f"Example {i+1}:")
        print(json.dumps(example, indent=2))
        print("-" * 30)

if __name__ == "__main__":
    print("ðŸ”‹ Renewable Energy Dataset Generator")
    print("=" * 40)
    
    # Step 1: Convert initial examples to Alpaca format
    print("Step 1: Converting to Alpaca format...")
    alpaca_data = convert_to_alpaca_format(SAMPLE_QA_PAIRS)
    
    # Step 2: Generate variations to reach 5000 examples
    print("Step 2: Generating variations...")
    expanded_qa = generate_variations(SAMPLE_QA_PAIRS, target_count=5000)
    expanded_alpaca = convert_to_alpaca_format(expanded_qa)
    
    # Step 3: Save dataset
    print("Step 3: Saving dataset...")
    save_dataset(expanded_alpaca, "renewable_energy_dataset.json")
    
    # Step 4: Sanity check
    print("Step 4: Performing sanity check...")
    dataset_sanity_check(expanded_alpaca)
    
    print("\nâœ… Dataset generation complete!")
